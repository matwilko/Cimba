<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

	
	var gitdescribe = new System.Diagnostics.Process();
	gitdescribe.StartInfo.WorkingDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
	gitdescribe.StartInfo.FileName = "git.exe";
	gitdescribe.StartInfo.Arguments = "describe --long";
	gitdescribe.StartInfo.UseShellExecute = false;
	gitdescribe.StartInfo.RedirectStandardOutput = true;
	gitdescribe.StartInfo.CreateNoWindow = true;
	gitdescribe.Start();

	string gitoutput = gitdescribe.StandardOutput.ReadToEnd();
	gitdescribe.WaitForExit();
	var regex = new System.Text.RegularExpressions.Regex("([0-9]*?).([0-9]*?)-([0-9]*?)-.*");
	var match = regex.Match(gitoutput);
	if (!match.Success)
	{
		Error("Git Revision Tag format was not recognised. Make sure tag is of form `major.minor`");
	}

	var major = match.Groups[1].Value;
	var minor = match.Groups[2].Value;
	var revision = match.Groups[3].Value;
	var builddate = (DateTime.Today - new DateTime(2013, 5, 9)).TotalDays.ToString();
#>

// 
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// 
 
using System.Reflection;
 
[assembly: AssemblyVersion("<#= major #>.<#= minor #>.<#= revision #>.<#= builddate #>")]
[assembly: AssemblyFileVersion("<#= major #>.<#= minor #>.<#= revision #>.<#= builddate #>")]
